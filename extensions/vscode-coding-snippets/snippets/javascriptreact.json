{
  /*
	// Place your snippets for JavaScript React here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
  "Debugger": {
    "prefix": "db",
    "body": ["debugger; // eslint-disable-line no-debugger", "$1"],
    "description": "add debugger;"
  },
  "reactPureComponent": {
    "prefix": "rpc",
    "body": [
      "import cn from 'classnames';",
      "import PropTypes from 'prop-types';",
      "import React, { PureComponent } from 'react';",
      "",
      "import styles from './index.less';",
      "",
      "class ${1:componentName} extends PureComponent {",
      "  static propTypes = {",
      "    className: PropTypes.string",
      "  }",
      "",
      "  static defaultProps = {",
      "    className: null",
      "  }",
      "",
      "  render() {",
      "    const { className } = this.props;",
      "",
      "    return (",
      "      <div className={cn(styles.container, className)}>",
      "        ${1:componentName}",
      "      </div>",
      "    );",
      "  }",
      "}",
      "",
      "export default ${1:componentName};"
    ],
    "description": "Creates a React pure component class with PropTypes and ES6 module system"
  },
  "PropType: array of shape": {
    "prefix": "ptaosh",
    "body": ["PropTypes.arrayOf(PropTypes.shape()),"]
  },
  "PropType: array of shape required": {
    "prefix": "ptaoshr",
    "body": ["PropTypes.arrayOf(PropTypes.shape()).isRequired,"]
  },
  "PropType: children": {
    "prefix": "ptc",
    "body": [
      "PropTypes.oneOfType([",
      "  PropTypes.element,",
      "  PropTypes.arrayOf(PropTypes.element)",
      "]),"
    ]
  },
  "PropType: children required": {
    "prefix": "ptcr",
    "body": [
      "PropTypes.oneOfType([",
      "  PropTypes.element,",
      "  PropTypes.arrayOf(PropTypes.element)",
      "]).isRequired,"
    ]
  },
  "PropType: id": {
    "prefix": "ptid",
    "body": [
      "PropTypes.oneOfType([",
      "  PropTypes.string,",
      "  PropTypes.number",
      "]).isRequired,"
    ]
  }
}
